snippet cursor "Percorre tabela"
${2/.*/\u$0/}Record $2Rec;

Databases.${1:}->createCursor();
while( Databases.$1->nextRecord( ${2:type}Rec ) ) {
  $0
}
Databases.$1->destroyCursor();
endsnippet

snippet newhpp "Novo arquivo HPP"
// ----------------------------------------------------------------------
// Copyright (C) 2017-2018 Geraldo Ribeiro <geraldo@intmain.io>
// ----------------------------------------------------------------------

#ifndef __${1:FILENAME}_HPP__
#define __$1_HPP__
$0
#endif
endsnippet

snippet view01html "Personalização de tabela"
class View01Html$1Record : public Html${1:Type}Record {
public:
  View01Html$1Record( shared_ptr<GrCGI> grcgi, shared_ptr<Database> db ) : Html$1Record( grcgi, db ){};
  virtual ~View01Html$1Record(){};
  virtual void set${2:ParentId}Filter( const string &id );
  virtual string nameVarTD( const $1Record &rec ) const;

protected:
  virtual bool select( const $1Record &rec ) const;
  string m$2Filter;
};
endsnippet

snippet requiredValue "Campo requerido"
string $1;

requiredValue( "${1:variable}", $1 );
endsnippet

snippet optionalValue "Campo opcional"
string $1;

optionalValue( "${1:variable}", $1 );
endsnippet

snippet getRecord
${1/.*/\u$0/}Record $1Rec;

m${1/.*/\u$0/}Db->getRecord( $1Id, ${1:type}Rec );
endsnippet

snippet htmlList
Html${1:Type}Record hrec( Databases.$1, params( data ) );

beginCommonHtml();
content += GR_NL0.append( hrec.htmlList("$0") );
endCommonHtml();
endsnippet

snippet htmlView
Html${1:Type}Record hrec( Databases.$1, params( data ) );

beginCommonHtml();
content += GR_NL0.append( GR_TAGS_( "h1", "Visualizar" ) );
content += GR_NL0.append( hrec.htmlView("$0") );
endCommonHtml();
endsnippet

snippet htmlEdit
Html${1:Type}Record hrec( Databases.$1, params( data ) );

beginCommonHtml();
content += GR_NL0.append( GR_TAGS_( "h1", "Edição" ) );
content += GR_NL0.appedn( hrec.htmlEdit("$0") );
endCommonHtml();
endsnippet

snippet htmlUpdate
Html${1:Type}Record hrec( Databases.$1, params( data ) );

beginCommonHtml();
content += GR_NL0.append( GR_TAGS_( "h1", "Atualizar" ) );
content += GR_NL0.append( hrec.htmlUpdate( mSequencer ) );
endCommonHtml();
endsnippet

snippet htmlDelete
Html${1:Type}Record hrec( Databases.$1, params( data ) );

beginCommonHtml();
content += GR_NL0.append( GR_TAGS_( "h1", "Remover" ) );
content += GR_NL0.append( hrec.htmlDelete() );
endCommonHtml();
endsnippet

snippet htmlcrud
virtual void actEdit${1:Table}RecordFrm01();
virtual void actList$1RecordFrm01();
virtual void actUpdate$1RecordFrm01();
virtual void actDelete$1RecordFrm01();
virtual void actView$1RecordFrm01();
virtual void actAdd$1RecordFrm01();
endsnippet

snippet header
// ----------------------------------------------------------------------
// Copyright (C) 2018 Geraldo Ribeiro <geraldo@intmain.io>
// ----------------------------------------------------------------------

endsnippet

snippet gpsheader
// ----------------------------------------------------------------------
// Copyright (C) 2017-2018 Geraldo Ribeiro <geraldo@intmain.io>
// Copyright (C) 2017-2018 Pedro Bruno <pedroguilhermebruno@yahoo.com.br>
// Copyright (C) 2017-2018 Sergio Ribeiro <segori@gmail.com>
// ----------------------------------------------------------------------

endsnippet

snippet sep
// ----------------------------------------------------------------------
//
// ----------------------------------------------------------------------
endsnippet

snippet cf
// clang-format off
// clang-format on
endsnippet

snippet ns
// clang-format off
namespace br { namespace com { namespace intmain { namespace GrComponents { namespace GrWebServer {
// clang-format on

// clang-format off
} } } } }
// clang-format on
endsnippet

snippet ifndef
#ifndef __${1:FILE}_HPP__
#define __$1_HPP__

#endif
endsnippet

snippet test
SCENARIO( "${1:Título do teste}" )
{
  WHEN( "${2:Quando acontece algo}" )
  {
    auto output = std::make_shared<CoutRedirect>( "${3:nome_do_test}.txt" );
    auto button = std::make_shared<GrHtmlButton>();

    THEN( "${4:Percebo os efeitos}" )
    {
      REQUIRE_THAT( strH, Contains( "branco" ) );
    }
  }
}
endsnippet

snippet pqxxtxn
  try {
    if( hasTransaction() ) {
    }
    else {
      pqxx::work txn( *mConnection );
      //txn.exec_prepared( "insertRecord", record.key(), val );
      txn.commit();
    }
  }
  catch( pqxx::pqxx_exception &e ) {
    logException( e );
  }
endsnippet

snippet GrHtmlForm
auto form = make_shared<GrHtmlForm>( "${1:action}Frm01", GrWebServerURL( action( data, "${1}Frm01" ) ), "Continuar" );
form->addExtraButton( "cancel", "Cancelar", cgiPath( "listClientRecordFrm01" ) );

form->beginFieldSet( "CPF do cliente" );
form->addTextField( true, "cpf", "CPF", cpf, "Entre com o CPF do novo cliente." );
form->addTextField( true, "fullname", "Nome completo", fullname, "Entre com o nome completo do novo cliente." );
form->endFieldSet();

content += GR_NL0.append( form->str() );
endsnippet


snippet operator<<

friend ostream &operator<<( ostream &os, const ${1/.*/\u$0/} &${1:point} )
{
  os << "x: " << $1.x << " y: " << $1.y << endl;
  return os;
}

endsnippet

snippet getset
void set${2/.*/\u$0/}( const ${1:string}& ${2:userId} )
{
  m${2/.*/\u$0/} = $2;
}

$1 $2() const
{
  return m${2/.*/\u$0/};
}
endsnippet

snippet na "Nova action" b
${1:TestActionNameComplex}

`!p
guard = '__' + re.sub('(?!^)([A-Z]+)', r'_\1',t[1]).upper() + '_HPP__'
nsOpen = '// clang-format off\nnamespace br { namespace com { namespace intmain { namespace GrComponents { namespace GrWebServer {\n// clang-format on'
nsClose = '// clang-format off\n} } } } }\n// clang-format on'

snip.rv = '#ifndef ' + guard
snip += '#define ' + guard
snip += ''
snip += nsOpen
snip += ''
snip += 'class ' + t[1] + ' : public PagePriv {'
snip += '  virtual void drawPage( GrWebServerPageData &data ) const;'
snip += '};'
snip += ''
snip += nsClose
snip += ''
snip += '#endif'
snip += ''
snip += '#include "' + t[1] + '.hpp"'
snip += ''
snip += nsOpen
snip += ''
snip += 'void ' + t[1] + '::drawPage( GrWebServerPageData &data ) const'
snip += '{'
snip += '  string content;'
snip += '  content += beginCommonHtml( data );'
snip += '  content += GR_NL0.append( GR_TAGS_( "h1", "Exportação de documentos" ) );'
snip += '  content += endCommonHtml( data );'
snip += '  setContent( data, content );'
snip += '}'
snip += ''
snip += nsClose
`
endsnippet

snippet error
string nextUrl = GrWebServerURL( "/listOrderRecordFrm01" );
error( data, "failure", "Pedido não encontrado: " + orderId, nextUrl );
finish( data );
return;
endsnippet

# vim: ft=snippets
