# Separadores

snippet ifndef
#ifndef __${1:FILE}_HPP__
#define __$1_HPP__

#endif
endsnippet

snippet ---
// ----------------------------------------------------------------------
// $0
// ----------------------------------------------------------------------
endsnippet

snippet sep
// ----------------------------------------------------------------------
//
// ----------------------------------------------------------------------
endsnippet

snippet header
// ----------------------------------------------------------------------
// Copyright (C) 2017-2020 Geraldo Ribeiro <geraldo@intmain.io>
// ----------------------------------------------------------------------

endsnippet

snippet header_kashim
// ----------------------------------------------------------------------
// Copyright (C) 2020-2020 Geraldo Ribeiro <geraldo@intmain.io>
// Copyright (C) 2020-2020 Ulisses Massafera <u.massafera@gmail.com>
// Copyright (C) 2020-2020 Eduardo Stetner <edu.stetner@gmail.com>
// ----------------------------------------------------------------------

endsnippet

snippet ff
// Flawfinder: ignore
endsnippet

snippet cf
// clang-format off
// clang-format on
endsnippet

snippet ns
// clang-format off
namespace br { namespace com { namespace intmain { namespace GrComponents { namespace GrWebServer {
// clang-format on

// clang-format off
} } } } }
// clang-format on
endsnippet

snippet main
using namespace std;

int main( [[maybe_unused]] int argc, [[maybe_unused]] char **argv )
{
  //{{{
  $0
  //}}}
  return 0;
}
endsnippet

# Cabeçalhos

snippet header_taoker
// ----------------------------------------------------------------------
// Copyright (C) 2017-2020 Anderson Sabara <anderson-sabara@taoker.com.br>
// Copyright (C) 2017-2020 Geraldo Ribeiro <geraldo-ribeiro@taoker.com.br>
// ----------------------------------------------------------------------

endsnippet

snippet gpsheader
// ----------------------------------------------------------------------
// Copyright (C) 2017-2020 Geraldo Ribeiro <geraldo@intmain.io>
// Copyright (C) 2017-2020 Pedro Bruno <pedroguilhermebruno@yahoo.com.br>
// Copyright (C) 2017-2020 Sergio Ribeiro <segori@gmail.com>
// ----------------------------------------------------------------------

endsnippet


snippet newhpp "Novo arquivo HPP"
// ----------------------------------------------------------------------
// Copyright (C) 2017-2020 Geraldo Ribeiro <geraldo@intmain.io>
// ----------------------------------------------------------------------

#ifndef __${1:FILENAME}_HPP__
#define __$1_HPP__
$0
#endif
endsnippet

snippet vartdhpp
  virtual string ${1:field}VarTD( const ${2:Type}Record &rec ) const;
endsnippet

snippet vartdcpp
string View01Html$2Record::${1:field}VarTD( const ${2:Type}Record &rec ) const
{
  return GR_TD( "number center-align minimum $1", to_string( rec.$1() ) );
}
endsnippet

snippet view01html "Personalização de tabela"
class View01Html$1Record : public Html${1:Type}Record {
public:
  View01Html$1Record( DatabasePtr db, map<string, string> &params ) : Html$1Record( db, params ){};
  virtual ~View01Html$1Record(){};
  virtual void set${2:ParentId}Filter( const string &id );
  virtual string nameVarTD( const $1Record &rec ) const;

protected:
  virtual bool select( const $1Record &rec ) const;
  string m$2Filter;
};

// ----------------------------------------------------------------------
// Copyright (C) 2017-2020 Geraldo Ribeiro <geraldo@intmain.io>
// ----------------------------------------------------------------------
#include <View01Html$1Record.hpp>

// ----------------------------------------------------------------------
//
// ----------------------------------------------------------------------
void View01Html$1Record::set$2Filter( const string &id )
{
  m$2Filter = id;
}

// ----------------------------------------------------------------------
//
// ----------------------------------------------------------------------
bool View01Html$1Record::select( const $1Record &rec ) const
{
  return true;
}
endsnippet

snippet requiredValue "Campo requerido"
string $1;

requiredValue( data, "${1:variable}", $1 );
endsnippet

snippet optionalValue "Campo opcional"
string $1;

optionalValue( data, "${1:variable}", $1 );
endsnippet

# --- Databases ---

snippet getRecord
${1/.*/\u$0/}Record $1Rec;

Databases.${1/.*/\u$0/}->getRecord( $1Id, ${1:type}Rec );
endsnippet

snippet updateRecord
Databases.${1/.*/\u$0/}->updateRecord( ${1:type}Rec );
endsnippet

snippet insertRecord
Databases.${1/.*/\u$0/}->insertRecord( ${1:type}Rec );
endsnippet

snippet deleteRecord
Databases.${1/.*/\u$0/}->deleteRecord( ${1:type}Rec );
endsnippet

snippet cursor "Percorre tabela"
${1/.*/\u$0/}Record $1Rec;

Databases.${1/.*/\u$0/}->createCursor();
while( Databases.${1/.*/\u$0/}->nextRecord( ${1:type}Rec ) ) {
  $0
}
Databases.${1/.*/\u$0/}->destroyCursor();
endsnippet

snippet htmlList
string content;
Html${1:Type}Record hrec( Databases.$1, params( data ) );
setPageTitle( data, "Listar" );
content += beginCommonHtml( data );
content += GR_NL0( GR_H1_( pageTitle( data ) ) );
content += GR_NL0( hrec.htmlList("$0") );
content += endCommonHtml( data );
setContent( data, content );
endsnippet

snippet htmlView
string content;
Html${1:Type}Record hrec( Databases.$1, params( data ) );
setPageTitle( data, "Visualizar" );
content += beginCommonHtml( data );
content += GR_NL0( GR_H1_( pageTitle( data ) ) );
content += GR_NL0( hrec.htmlView("$0") );
content += endCommonHtml( data );
setContent( data, content );
endsnippet

snippet htmlEdit
string content;
Html${1:Type}Record hrec( Databases.$1, params( data ) );
setPageTitle( data, "Edição" );
content += beginCommonHtml( data );
content += GR_NL0( GR_H1_( pageTitle( data ) ) );
content += GR_NL0( hrec.htmlEdit("$0") );
content += endCommonHtml( data );
setContent( data, content );
endsnippet

snippet htmlUpdate
string content;
Html${1:Type}Record hrec( Databases.$1, params( data ) );
setPageTitle( data, "Atualizar" );
content += beginCommonHtml( data );
content += GR_NL0( GR_H1_( pageTitle( data ) ) );
content += GR_NL0( hrec.htmlUpdate( Databases.Seq ) );
content += endCommonHtml( data );
setContent( data, content );
endsnippet

snippet htmlDelete
string content;
Html${1:Type}Record hrec( Databases.$1, params( data ) );
setPageTitle( data, "Remover" );
content += beginCommonHtml( data );
content += GR_NL0( GR_H1_( pageTitle( data ) ) );
content += GR_NL0( hrec.htmlDelete() );
content += endCommonHtml( data );
setContent( data, content );
endsnippet

snippet htmlcrud
virtual void actEdit${1:Table}RecordFrm01();
virtual void actList$1RecordFrm01();
virtual void actUpdate$1RecordFrm01();
virtual void actDelete$1RecordFrm01();
virtual void actView$1RecordFrm01();
virtual void actAdd$1RecordFrm01();
endsnippet

snippet htmlAdd
  ${1/.*/\u$0/}Record $1Rec;
  string ${2:variavel};

  requiredValue( data, "$2", $2 );
  auto id = $1Rec.newKey();

  $1Rec.setKey( id );
  $1Rec.set${2/.*/\u$0/}( $2 );
  Databases.${1/.*/\u$0/}->insertRecord( $1Rec );
  redirectTo( data, 
    GrWebServerURL( "/edit${1/.*/\u$0/}RecordFrm01" )
      .param( "id", id ) );
endsnippet

snippet htmlAddButton
  auto sessionObj = basicUserInformation( data );
  if( !sessionObj ) {
    redirectTo( data, "/loginFrm01" );
    return;
  }

  GrHtmlButton buttons;
  auto         accountId = sessionObj->accountId();

  content += GR_NL0(
      buttons.add( GrWebServerURL( "/addWalletRecordFrm01" ).param( "accountId", accountId ), "Nova carteira" ) );
endsnippet

snippet test
SCENARIO( "${1:Título do teste}" )
{
  GIVEN ( "${2:Descrição do cenário}" )
  {
    WHEN( "${3:Quando acontece algo}" )
    {
      auto output = std::make_shared<CoutRedirect>( "${4:nome_do_test}.txt" );
      auto button = std::make_shared<GrHtmlButton>();

      THEN( "${5:Percebo os efeitos}" )
      {
        REQUIRE_THAT( strH, Contains( "branco" ) );
      }
    }
  }
}
endsnippet

snippet testcase
TEST_CASE( "${1:Nome do teste}", "[tag1],[tag2]" )
{

}
endsnippet

snippet testString
REQUIRE_THAT( str, EndsWith( "as a service" ) );
REQUIRE_THAT( str, StartsWith( "as a service" ) );
REQUIRE_THAT( str, Contains( "as a service" ) );
REQUIRE_THAT( str, Equals( "as a service" ) );
REQUIRE_THAT( str, Matches( "as a service.*" ) );
REQUIRE_THAT( str, EndsWith( "as a service", Catch::CaseSensitive::No ) );
REQUIRE_THAT( str,
    EndsWith( "as a service" ) or
    ( StartsWith( "Big data" ) and
    ! Contains( "web scale" ) )
);
endsnippet

snippet testVector
REQUIRE_THAT( vec, Contains( subvec ) );
REQUIRE_THAT( vec, VectorContains( elem ) );
REQUIRE_THAT( vec, Equals( otherVec ) );
endsnippet

snippet testFloat
REQUIRE_THAT( number, WithinULP( 1.f, 1 ) ); // compara float
REQUIRE_THAT( number, WithinULP( 1., 1 ) );  // compara double
endsnippet

snippet pqxxtxn
  try {
    if( hasTransaction() ) {
    }
    else {
      pqxx::work txn( *mConnection );
      //txn.exec_prepared( "insertRecord", record.key(), val );
      txn.commit();
    }
  }
  catch( pqxx::pqxx_exception &e ) {
    logException( e );
  }
endsnippet

snippet GrHtmlForm
auto form = make_shared<GrHtmlForm>( "${1:action}Frm01", GrWebServerURL( action( data, "${1}Frm01" ) ), "Continuar" );
form->addExtraButton( "cancel", "Cancelar", "list${1}Frm01" );

form->beginFieldSet( "CPF do cliente" );
form->setRowName( "line0" );
form->setColumnConf( "s12 l4" );
form->addTextField( true, "cpf", "CPF", cpf, "Entre com o CPF do novo cliente." );
form->addTextField( true, "fullname", "Nome completo", fullname, "Entre com o nome completo do novo cliente." );
form->endFieldSet();

content += GR_NL0( form->str() );
endsnippet


snippet operator<<

friend ostream &operator<<( ostream &os, const ${1/.*/\u$0/} &${1:point} )
{
  os << "x: " << $1.x << " y: " << $1.y << endl;
  return os;
}

endsnippet

snippet getset
void set${2/.*/\u$0/}( const ${1:string}& ${2:userId} )
{
  m${2/.*/\u$0/} = $2;
}

$1 $2() const
{
  return m${2/.*/\u$0/};
}
endsnippet

snippet na2
#include "${1/.*/\u$0/}.hpp"
add( "/${1:addXptoRecordFrm01}", &$1 );
${1/.*/\u$0/} $1;
endsnippet

snippet nah "Nova action - cabeçalho" b
`!p
guard = '__' + re.sub('(?!^)([A-Z]+)', r'_\1',snip.basename).upper() + '_HPP__'
nsOpen = '// clang-format off\nnamespace br { namespace com { namespace intmain { namespace GrComponents { namespace GrWebServer {\n// clang-format on'
nsClose = '// clang-format off\n} } } } }\n// clang-format on'

snip.rv = '// ----------------------------------------------------------------------'
snip += '// Copyright (C) 2017-2021 Geraldo Ribeiro <geraldo@intmain.io>'
snip += '// ----------------------------------------------------------------------'
snip += ''
snip += '#ifndef ' + guard
snip += '#define ' + guard
snip += ''
snip += 'class ' + snip.basename + ' : public PagePriv {'
snip += '  virtual void drawPage( GrWebServerPageData &data ) const;'
snip += '};'
snip += ''
snip += '#endif'
snip += ''
`
endsnippet

# https://github.com/SirVer/ultisnips/issues/1029
# Default com nome do arquivo sem extensão
snippet na "Nova action" b
// ${1:`!p snip.rv = snip.basename`}
`!p
guard = '__' + re.sub('(?!^)([A-Z]+)', r'_\1',t[1]).upper() + '_HPP__'
nsOpen = '// clang-format off\nnamespace br { namespace com { namespace intmain { namespace GrComponents { namespace GrWebServer {\n// clang-format on'
nsClose = '// clang-format off\n} } } } }\n// clang-format on'


snip.rv = '// ----------------------------------------------------------------------'
snip += '// Copyright (C) 2017-2020 Geraldo Ribeiro <geraldo@intmain.io>'
snip += '// ----------------------------------------------------------------------'
snip += ''
snip += '#ifndef ' + guard
snip += '#define ' + guard
# snip += ''
# snip += nsOpen
snip += ''
snip += 'class ' + t[1] + ' : public PagePriv {'
snip += '  virtual void drawPage( GrWebServerPageData &data ) const;'
snip += '};'
# snip += ''
# snip += nsClose
snip += ''
snip += '#endif'
snip += ''
snip += '// ----------------------------------------------------------------------'
snip += '// Copyright (C) 2017-2020 Geraldo Ribeiro <geraldo@intmain.io>'
snip += '// ----------------------------------------------------------------------'
snip += '#include "' + t[1] + '.hpp"'
snip += ''
# snip += nsOpen
snip += ''
snip += '// ----------------------------------------------------------------------'
snip += '//'
snip += '// ----------------------------------------------------------------------'
snip += 'void ' + t[1] + '::drawPage( GrWebServerPageData &data ) const'
snip += '{'
snip += '  string content;'
snip += '  setPageTitle( data, "' + t[1] + '" );'
snip += '  content += beginCommonHtml( data );'
snip += '  content += GR_NL0( GR_H1_( pageTitle( data ) ) );'
snip += '  content += endCommonHtml( data );'
snip += '  setContent( data, content );'
snip += '}'
snip += ''
# snip += nsClose
`
endsnippet

snippet tna "Nova action" b
${1:TestActionNameComplex}

`!p
guard = '__' + re.sub('(?!^)([A-Z]+)', r'_\1',t[1]).upper() + '_HPP__'
nsOpen = '// clang-format off\nnamespace br { namespace com { namespace intmain { namespace GrComponents { namespace GrWebServer {\n// clang-format on'
nsClose = '// clang-format off\n} } } } }\n// clang-format on'

snip.rv = '// ----------------------------------------------------------------------'
snip += '// Copyright (C) 2017-2020 Anderson Sabara <anderson-sabara@taoker.com.br>'
snip += '// Copyright (C) 2017-2020 Geraldo Ribeiro <geraldo-ribeiro@taoker.com.br>'
snip += '// ----------------------------------------------------------------------'
snip += '#ifndef ' + guard
snip += '#define ' + guard
snip += ''
# snip += nsOpen
snip += ''
snip += 'class ' + t[1] + ' : public PagePriv {'
snip += '  virtual void drawPage( GrWebServerPageData &data ) const;'
snip += '};'
snip += ''
# snip += nsClose
snip += ''
snip += '#endif'
snip += ''
snip += '// ----------------------------------------------------------------------'
snip += '// Copyright (C) 2017-2020 Anderson Sabara <anderson-sabara@taoker.com.br>'
snip += '// Copyright (C) 2017-2020 Geraldo Ribeiro <geraldo-ribeiro@taoker.com.br>'
snip += '// ----------------------------------------------------------------------'
snip += '#include "' + t[1] + '.hpp"'
snip += ''
# snip += nsOpen
snip += ''
snip += '// ----------------------------------------------------------------------'
snip += '//'
snip += '// ----------------------------------------------------------------------'
snip += 'void ' + t[1] + '::drawPage( GrWebServerPageData &data ) const'
snip += '{'
snip += '  string content;'
snip += '  setPageTitle( data, "Exportação de documentos" );'
snip += '  content += beginCommonHtml( data );'
snip += '  content += GR_NL0( GR_H1_( pageTitle( data ) ) );'
snip += '  content += endCommonHtml( data );'
snip += '  setContent( data, content );'
snip += '}'
snip += ''
# snip += nsClose
`
endsnippet

snippet error
string nextUrl = GrWebServerURL( "/listOrderRecordFrm01" );
error( data, "failure", "Pedido não encontrado: " + orderId, nextUrl );
finish( data );
return;
endsnippet

snippet js
addJavaScript( "https://cdnjs.cloudflare.com/ajax/libs/showdown/1.8.6/showdown.min.js" );
addDeferJavascript( data, "viewCartRecordFrm01.js" );
addDeferJavascript( data, "https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js" );
endsnippet

snippet css
addStylesheet( data, "https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css" );
endsnippet

snippet privrepo
// ----------------------------------------------------------------------
// Copyright (C) 2017-2020 Geraldo Ribeiro <geraldo@intmain.io>
// ----------------------------------------------------------------------

// Nome: ${1:Post}

#ifndef __PRIV_REPO_$1_RECORD_HPP__
#define __PRIV_REPO_$1_RECORD_HPP__

#include "Add$1RecordFrm01.hpp"
#include "Delete$1RecordFrm01.hpp"
#include "Edit$1RecordFrm01.hpp"
#include "List$1RecordFrm01.hpp"
#include "Update$1RecordFrm01.hpp"
#include "View$1RecordFrm01.hpp"

class PrivRepo$1Record : public DynamicRepository {
public:
  PrivRepo$1Record() : DynamicRepository()
  {
    add( "/add$1RecordFrm01", &add$1RecordFrm01 );
    add( "/delete$1RecordFrm01", &delete$1RecordFrm01 );
    add( "/edit$1RecordFrm01", &edit$1RecordFrm01 );
    add( "/list$1RecordFrm01", &list$1RecordFrm01 );
    add( "/update$1RecordFrm01", &update$1RecordFrm01 );
    add( "/view$1RecordFrm01", &view$1RecordFrm01 );
  }

private:
  Add$1RecordFrm01    add$1RecordFrm01;
  Delete$1RecordFrm01 delete$1RecordFrm01;
  Edit$1RecordFrm01   edit$1RecordFrm01;
  List$1RecordFrm01   list$1RecordFrm01;
  Update$1RecordFrm01 update$1RecordFrm01;
  View$1RecordFrm01   view$1RecordFrm01;
};

#endif
endsnippet

snippet GR_CARD_IMG
${1:content} += GR_NL0( GR_DIV( "row" ) );
$1 += GR_NL1( GR_DIV( "col s12 m6 l4" ) );
$1 += GR_NL2( GR_DIV( "card" ) );
$1 += GR_NL3( GR_DIVS( "card-image", GR_IMG( "cls", "src", "alt" ) ) );

$1 += GR_NL3( GR_DIV( "card-content" ) );
$1 += GR_NL4( GR_SPAN( "card-title", "Título do card" ) );
$1 += GR_NL3( GR_P_( "Conteúdo do cartão" ) );
$1 += GR_NL3( GRxDIV );

$1 += GR_NL3( GR_DIV( "card-action" ) );
$1 += GR_NL4( GR_A( "cls", "text", "href" ) );
$1 += GR_NL3( GRxDIV );
$1 += GR_NL2( GRxDIV );
$1 += GR_NL1( GRxDIV );
$1 += GR_NL0( GRxDIV );
endsnippet

snippet GR_CARD
${1:content} += GR_NL0( GR_DIV( "row" ) );
$1 += GR_NL1( GR_DIV( "col s12 m6 l4" ) );
$1 += GR_NL2( GR_DIV( "card blue-grey darken-1" ) );
$1 += GR_NL3( GR_DIV( "card-content white-text" ) );
$1 += GR_NL4( GR_SPAN( "card-title", "Título do card" ) );
$1 += GR_NL3( GR_P_( "Conteúdo do cartão" ) );
$1 += GR_NL3( GRxDIV );

$1 += GR_NL3( GR_DIV( "card-action" ) );
$1 += GR_NL4( GR_A( "cls", "text", "href" ) );
$1 += GR_NL4( GR_A( "cls", "text", "href" ) );
$1 += GR_NL3( GRxDIV );
$1 += GR_NL2( GRxDIV );
$1 += GR_NL1( GRxDIV );
$1 += GR_NL0( GRxDIV );
endsnippet

snippet GR_A
GR_A( cls, text, href )
endsnippet

snippet GR_IMG
GR_IMG( cls, src, alt )
endsnippet

snippet GR_ATTR
GR_DATA( prop, val )
endsnippet

snippet GR_DATA
GR_DATA( name, val )
endsnippet

snippet GR_CLASS
GR_CLASS( cls )
endsnippet

snippet lorem
"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec aliquet tellus vitae risus tempus, ut facilisis risus varius. Vestibulum iaculis ornare cursus. Donec mi velit, sollicitudin vitae convallis quis, aliquet vel mi. Vestibulum id ornare quam. Proin eget rhoncus diam, vitae tempus sapien. Phasellus in egestas libero, quis maximus sem. Morbi congue ultrices ipsum nec eleifend. Nulla in lorem viverra, feugiat libero in, sodales tellus. Integer tempus volutpat rhoncus."
endsnippet

snippet GR_ROW
  content += GR_NL0( GR_DIV( "row" ) );
  content += GR_NL1( GR_DIV( "col s12 m6" ) );
  content += GR_NL1( "Conteúdo" );
  content += GR_NL1( GRxDIV );
  content += GR_NL0( GRxDIV );
endsnippet


snippet formadd
  form->addReadOnlyTextField( true, name, label, optvalue, opthelp, optaccesskey, optstyle );
  form->addEmailField( true, name, label, optvalue, opthelp, optaccesskey, optstyle );
  form->addURLField( true, name, label, optvalue, opthelp, optaccesskey, optstyle );
  form->addPhoneField( true, name, label, optvalue, opthelp, optaccesskey, optstyle );
  form->addTextField( true, name, label, optvalue, opthelp, optaccesskey, optstyle );
  form->addIntField( true, name, label, optvalue, opthelp, optaccesskey, optstyle );
  form->addDoubleField( true, name, label, optvalue, opthelp, optaccesskey, optstyle );
  form->addMoneyBRLField( true, name, label, optvalue, opthelp, optaccesskey, optstyle );
  form->addPasswordField( true, name, label, optvalue, opthelp, optaccesskey, optstyle );
  form->addCheckBoxField( true, name, label, state, value, opthelp, optaccesskey, optstyle );
  form->addComboBoxField( true, name, label, optvalue, thelist, opthelp, optaccesskey, optstyle );
  form->addMultipleComboBoxField( true, name, label,  optvalue, thelist, opthelp, optaccesskey, optstyle );
  form->addMultipleFileField( true, name, label, optvalue, opthelp, optaccesskey, optstyle );
  form->addRadioField( true, name, label, optvalue, thelist, opthelp, optaccesskey, optstyle );
  form->addBitSetField( true, name, label, value, thelist, opthelp, optaccesskey, optstyle );
  form->addHiddenField( name, value );
  form->addTextAreaField( true, name, label, value, opthelp, optaccesskey, optstyle );
  form->addFile( true, name, label, opthelp, optmultiple );
  form->addMultipleFileField( true, name, label, opthelp );
  form->addColorPickerField( true, name, label, value, opthelp, optaccesskey, optstyle );
  form->addDateField( true, name, label, value, opthelp, optaccesskey, optstyle );
  form->addTimeField( true, name, label, value, opthelp, optaccesskey, optstyle );
  form->addCPFField( true, name, label, value, opthelp, optaccesskey, optstyle );
  form->addButton( name, label, onclick );
  form->addSubmitButton( name, label );
  form->addHtml( html );
endsnippet

snippet colbutton
GrHtmlButton buttons;
buttons.setFullWidthStyle();

auto addXXXUrl = GrWebServerURL( "/addXXXRecordFrm01" );
content += GR_DIVIDER;
content += GR_NL0( GR_DIV( "row" ) );
content += GR_NL1( GR_DIVS( "col s12 m3", buttons.add( addXXXUrl, "Adicionar cartão" ) ) );
content += GR_NL0( GRxDIV );
endsnippet

snippet button_next
GrHtmlButton buttons;

buttons.setStyle( "col s12 m3" );

content += GR_NL0( GR_DIV( "row" ) );
content += GR_NL1( buttons.next( "/config" ) );
content += GR_NL0( GRxDIV );

content += GR_NL0( GR_DIVS( "row", buttons.next( "/config" ) ) );
endsnippet

snippet msg
content += GR_NL0( GrHtmlMessage::${1:success}( "${2:mensagem}" ) );
endsnippet

snippet success
content += GR_NL0( GrHtmlMessage::success( "${1:mensagem}" ) );
endsnippet

snippet warning
content += GR_NL0( GrHtmlMessage::warning( "${1:mensagem}" ) );
endsnippet

snippet info
content += GR_NL0( GrHtmlMessage::info( "${1:mensagem}" ) );
endsnippet

snippet msgbtn
content += GR_NL0( GrHtmlMessage::${1:success}WithButton( "${2:url}", "${3:link}", "${4:mensagem}", "${5:title}" ) );
endsnippet

snippet ctexh
/*
 * `!p snip.rv = snip.fn`
 *
 * Created on: `git log --format=%aD $fn | tail -1 | sed "s/.*, \([0-9]\+\) \(...\) \(....\) .*/\1 de \2 de \3/"`
 * Author: CTEx
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *
 * Este código fonte é de propriedade exclusiva do Centro Tecnológico do Exército, podendo conter informação confidencial e legalmente protegida.
 * As informações contidas neste código-fonte estão protegidas por direitos autorais. Exceto quando especificamente permitido, nenhuma parte 
 * deste código-fonte pode ser distribuída nem reproduzida por nenhum meio, de nenhuma forma, sem a prévia permissão por escrito do
 * Centro Tecnológico do Exército.
 * Este código-fonte foi desenvolvido pelo Centro Tecnológico do Exército - C.N.P.J. 08.635.952/0001-93 – detentor legítimo 
 * de todos os direitos autorais e patrimoniais, sendo terminantemente proibida a cópia, reprodução parcial ou total, 
 * execução pública, anúncio e exposição, venda e locação sem a devida e expressa autorização contratual 
 * sob as penas da Lei Federal 9609/98 e 9610/98 e artigo 184 do Código Penal.
 * CTEx - Centro Tecnológico do Exército Brasileiro 2015
 * Todos os direitos reservados.
 * 
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */
endsnippet

snippet mu
[[maybe_unused]] 
endsnippet

snippet debug
spdlog::debug( "${0:Mensagem de debug}" );
endsnippet

snippet rats
// RATS: ignore
endsnippet

snippet CustomPage
GR_WEB_SERVER_PAGE_CUSTOM_PAGE_PUB;
GR_WEB_SERVER_PAGE_CUSTOM_PAGE_PROT;
GR_WEB_SERVER_PAGE_CUSTOM_PAGE_PRIV;
endsnippet

snippet iostream
#include <iostream>

using namespace std;
endsnippet

snippet json
#include <nlohmann/json.hpp>

using json = nlohmann::json;
endsnippet

snippet banner_dry
// +-----------------------------------------------------------------------------------------------------+
// | DRY - ARQUIVO COMUM A VÁRIAS APLICAÇÕES                                                             |
// +-----------------------------------------------------------------------------------------------------+
// |  _      _    _                       __  __ _         _                      _            _         |
// | | |    | |  | |               _     / / / /(_)       | |                    (_)          (_)        |
// | | |__  | |_ | |_  _ __   ___ (_)   / / / /  _  _ __  | |_  _ __ ___    __ _  _  _ __      _   ___   |
// | | '_ \ | __|| __|| '_ \ / __|     / / / /  | || '_ \ | __|| '_ \` _ \  / _\` || || '_ \    | | / _ \  |
// | | | | || |_ | |_ | |_) |\__ \ _  / / / /   | || | | || |_ | | | | | || (_| || || | | | _ | || (_) | |
// | |_| |_| \__| \__|| .__/ |___/(_)/_/ /_/    |_||_| |_| \__||_| |_| |_| \__,_||_||_| |_|(_)|_| \___/  |
// |                  | |                                                                                |
// |                  |_|                                                                                |
// |                                                                                                     |
// +-----------------------------------------------------------------------------------------------------+
endsnippet

snippet intmain_banner
//   _      _    _                       __  __ _         _                      _            _
//  | |    | |  | |               _     / / / /(_)       | |                    (_)          (_)
//  | |__  | |_ | |_  _ __   ___ (_)   / / / /  _  _ __  | |_  _ __ ___    __ _  _  _ __      _   ___
//  | '_ \ | __|| __|| '_ \ / __|     / / / /  | || '_ \ | __|| '_ \` _ \  / _\` || || '_ \    | | / _ \
//  | | | || |_ | |_ | |_) |\__ \ _  / / / /   | || | | || |_ | | | | | || (_| || || | | | _ | || (_) |
//  |_| |_| \__| \__|| .__/ |___/(_)/_/ /_/    |_||_| |_| \__||_| |_| |_| \__,_||_||_| |_|(_)|_| \___/
//                   | |
//                   |_|
endsnippet

snippet intmain_banner2
//   _       _     _                           __  __  _           _                         _               _
//  | |     | |   | |                  _      / / / / (_)         | |                       (_)             (_)
//  | |__   | |_  | |_   _ __    ___  (_)    / / / /   _   _ __   | |_   _ __ ___     __ _   _   _ __        _    ___
//  | '_ \  | __| | __| | '_ \  / __|       / / / /   | | | '_ \  | __| | '_ ` _ \   / _` | | | | '_ \      | |  / _ \
//  | | | | | |_  | |_  | |_) | \__ \  _   / / / /    | | | | | | | |_  | | | | | | | (_| | | | | | | |  _  | | | (_) |
//  |_| |_|  \__|  \__| | .__/  |___/ (_) /_/ /_/     |_| |_| |_|  \__| |_| |_| |_|  \__,_| |_| |_| |_| (_) |_|  \___/
//                      | |
//                      |_|
endsnippet

snippet intmain_banner3
//  ┬ ┌┐┌ ┌┬┐ ┌┬┐ ┌─┐ ┬ ┌┐┌   ┬ ┌─┐
//  │ │││  │  │││ ├─┤ │ │││   │ │ │
//  ┴ ┘└┘  ┴  ┴ ┴ ┴ ┴ ┴ ┘└┘ o ┴ └─┘
endsnippet

snippet intmain_banner_bin
//  01101001 01101110 01110100 01101101 01100001 01101001 01101110 00101110 01101001 01101111 
endsnippet

snippet intmain_banner_dec
//  104 116 116 112 115 58 47 47 105 110 116 109 97 105 110 46 105 111 
endsnippet

snippet intmain_banner_hex
//  68 74 74 70 73 3A 2F 2F 69 6E 74 6D 61 69 6E 2E 69 6F
endsnippet

snippet intemain_banner_morse
//  .... - - .--. ... ---... -..-. -..-. .. -. - -- .- .. -. .-.-.- .. ---
endsnippet

# vim: ft=snippets
