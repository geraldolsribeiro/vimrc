snippet cursor "Percorre tabela"
${2/.*/\u$0/}Record $2Rec;

${1:mDb}->createCursor();
while( $1->nextRecord( ${2:type}Rec ) ) {
  $0
}
$1->destroyCursor();
endsnippet

snippet newhpp "Novo arquivo HPP"
// ----------------------------------------------------------------------
// Copyright (C) 2017-2018 Geraldo Ribeiro <geraldo@intmain.io>
// ----------------------------------------------------------------------

#ifndef __${1:FILENAME}_HPP__
#define __$1_HPP__
$0
#endif
endsnippet

snippet view01html "Personalização de tabela"
class View01Html$1Record : public Html${1:Type}Record {
public:
  View01Html$1Record( shared_ptr<GrCGI> grcgi, shared_ptr<Database> db ) : Html$1Record( grcgi, db ){};
  virtual ~View01Html$1Record(){};
  virtual void set${2:ParentId}Filter( const string &id );
  virtual string nameVarTD( const $1Record &rec ) const;

protected:
  virtual bool select( const $1Record &rec ) const;
  string m$2Filter;
};
endsnippet

snippet requiredValue "Campo requerido"
string $1;

requiredValue( "${1:variable}", $1 );
endsnippet

snippet optionalValue "Campo opcional"
string $1;

optionalValue( "${1:variable}", $1 );
endsnippet

snippet getRecord
${1/.*/\u$0/}Record $1Rec;

m${1/.*/\u$0/}Db->getRecord( $1Id, ${1:type}Rec );
endsnippet

snippet htmlList
Html${1:Type}Record hrec( self(), m$1Db );

beginCommonHtml();
mOut << hrec.htmlList("$0");
endCommonHtml();
endsnippet

snippet htmlView
Html${1:Type}Record hrec( self(), m$1Db );

beginCommonHtml();
mOut << GR_NL0.append( GR_TAGS_( "h1", "Visualizar" ) );
mOut << hrec.htmlView("$0");
endCommonHtml();
endsnippet

snippet htmlEdit
Html${1:Type}Record hrec( self(), m$1Db );

beginCommonHtml();
mOut << GR_NL0.append( GR_TAGS_( "h1", "Edição" ) );
mOut << hrec.htmlEdit("$0");
endCommonHtml();
endsnippet

snippet htmlUpdate
Html${1:Type}Record hrec( self(), m$1Db );

beginCommonHtml();
mOut << GR_NL0.append( GR_TAGS_( "h1", "Atualizar" ) );
mOut << hrec.htmlUpdate( mSequencer );
endCommonHtml();
endsnippet

snippet htmlDelete
Html${1:Type}Record hrec( self(), m$1Db );

beginCommonHtml();
mOut << GR_NL0.append( GR_TAGS_( "h1", "Remover" ) );
mOut << hrec.htmlDelete();
endCommonHtml();
endsnippet

snippet htmlcrud
virtual void actEdit${1:Table}RecordFrm01();
virtual void actList$1RecordFrm01();
virtual void actUpdate$1RecordFrm01();
virtual void actDelete$1RecordFrm01();
virtual void actViewTest$1Frm01();
endsnippet

snippet header
// ----------------------------------------------------------------------
// Copyright (C) 2018 Geraldo Ribeiro <geraldo@intmain.io>
// ----------------------------------------------------------------------

endsnippet

snippet sep
// ----------------------------------------------------------------------
//
// ----------------------------------------------------------------------
endsnippet

snippet cf
// clang-format off
// clang-format on
endsnippet

snippet ifndef
#ifndef __${1:FILE}_HPP__
#define __$1_HPP__

#endif
endsnippet

snippet test
SCENARIO( "${1:Título do teste}" )
{
  WHEN( "${2:Quando acontece algo}" )
  {
    auto output = std::make_shared<CoutRedirect>( "${3:nome_do_test}.txt" );
    auto button = std::make_shared<GrHtmlButton>();

    THEN( "${4:Percebo os efeitos}" )
    {
      REQUIRE_THAT( strH, Contains( "branco" ) );
    }
  }
}
endsnippet

snippet pqxxtxn
  try {
    if( hasTransaction() ) {
    }
    else {
      pqxx::work txn( *mConnection );
      //txn.exec_prepared( "insertRecord", record.key(), val );
      txn.commit();
    }
  }
  catch( pqxx::pqxx_exception &e ) {
    logException( e );
  }
endsnippet


# vim: ft=snippets
